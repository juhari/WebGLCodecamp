if(!SceneJS.utils){SceneJS.utils={};}if(!SceneJS.utils.query){SceneJS.utils.query={};}SceneJS.utils.query.QueryNodeBoundary=function(){this.setConfigs(cfg);};SceneJS.utils.query.QueryNodeBoundary.prototype.setConfigs=function(cfg){if(!this._cfg){this._cfg={};}return this;};SceneJS.utils.query.QueryNodeBoundary.prototype.execute=function(params,completed){if(!params.nodeId){throw"SceneJS.utils.query.QueryNodeBoundary.execute expects params.nodeId";
}var node=SceneJS.withNode(params.nodeId);this._queryResult={boundary:this._getInitialBoundary()};if(completed){completed(this);}return this;};SceneJS.utils.query.QueryNodeBoundary.prototype.getResults=function(){return this._queryResult;};SceneJS.utils.query.QueryNodeBoundary.prototype._walkUpBranch=function(node,data){if(!data){data={worldPos:[0,0,0]};
}var mat;var type=node.get("type");switch(type){case"rotate":case"translate":case"scale":case"matrix":case"quaternion":mat=node.get("matrix");data.worldPos=this._transformPoint3(mat,data.worldPos);break;case"lookAt":var viewMat=node.get("matrix");data.viewMat=viewMat;data.viewPos=this._transformPoint3(viewMat,data.worldPos);
if(data.projMat){data.projPos=this._transformPoint3(data.projMat,data.viewPos);}else{data.projPos=data.viewPos;}break;case"camera":mat=node.get("matrix");data.projMat=mat;break;case"scene":var v=this._normalizeVec2(data.projPos);data.cameraPos=v;if(this._cfg.canvasWidth){var projPos=data.projPos;var x=projPos[0]/projPos[3];
var y=projPos[1]/projPos[3];data.canvasPos=[x*this._cfg.canvasWidth*0.5,y*this._cfg.canvasHeight*0.5];}break;case"library":return data;}var parent=node.parent();if(parent){data=this._walkUpBranch(parent,data);}return data;};SceneJS.utils.query.QueryNodeBoundary.prototype._getInitialBoundary=function(){return{xmin:100000,ymin:100000,zmin:100000,xmax:-100000,ymax:-100000,zmax:-100000};
};SceneJS.utils.query.QueryNodeBoundary.prototype._expandBoundary=function(boundary,positions){var x,y,z;for(var i=0,len=positions.length-3;i<len;i+=3){x=this._geo.positions[i];y=this._geo.positions[i+1];z=this._geo.positions[i+2];if(x<boundary.xmin){boundary.xmin=x;}if(y<boundary.ymin){boundary.ymin=y;
}if(z<boundary.zmin){boundary.zmin=z;}if(x>boundary.xmax){boundary.xmax=x;}if(y>boundary.ymax){boundary.ymax=y;}if(z>boundary.zmax){boundary.zmax=z;}}return boundary;};SceneJS.utils.query.QueryNodeBoundary.prototype._transformPoints3=function(mat,positions){var x,y,z;for(var i=0,len=positions.length-3;
i<len;i+=3){x=positions[i];y=positions[i+1];z=positions[i+2];positions[i+0]=(mat[0]*x)+(mat[4]*y)+(mat[8]*z)+mat[12];positions[i+1]=(mat[1]*x)+(mat[5]*y)+(mat[9]*z)+mat[13];positions[i+2]=(mat[2]*x)+(mat[6]*y)+(mat[10]*z)+mat[14];}};