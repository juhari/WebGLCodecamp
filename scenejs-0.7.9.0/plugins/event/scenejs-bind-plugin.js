(function(){const BIND_SERVICE_ID="_bind_service";if(SceneJS.Services.hasService(BIND_SERVICE_ID)){return;}var commandService=SceneJS.Services.getService(SceneJS.Services.COMMAND_SERVICE_ID);var bindService;SceneJS.Services.addService(BIND_SERVICE_ID,bindService=(function(){var time;var triggers={"interval":{bindings:{}},"init":{bindings:{}},"error":{bindings:{}},"reset":{bindings:{}},"scene-rendering":{bindings:{},nodeBindings:{}},"scene-rendered":{binding:{}},"node-created":{nodeBindings:{},bindings:{}},"node-destroyed":{nodeBindings:{},bindings:{}},"node-updated":{nodeBindings:{},bindings:{}},"node-rendering":{nodeBindings:{},bindings:{}},"node-rendered":{nodeBindings:{},bindings:{}}};
SceneJS._eventModule.addListener(SceneJS._eventModule.TIME_UPDATED,function(t){time=t;});SceneJS._eventModule.addListener(SceneJS._eventModule.INIT,function(){commandService=SceneJS.Services.getService(SceneJS.Services.COMMAND_SERVICE_ID);runBindings("init");});SceneJS._eventModule.addListener(SceneJS._eventModule.RESET,function(){runBindings("reset");
});SceneJS._eventModule.addListener(SceneJS._eventModule.ERROR,function(params){runBindings("error");});SceneJS._eventModule.addListener(SceneJS._eventModule.SCENE_RENDERING,function(params){runIntervalBindings();runBindings("scene-rendering",{nodeId:params.nodeId,canvas:params.canvas});});SceneJS._eventModule.addListener(SceneJS._eventModule.SCENE_RENDERED,function(params){runBindings("scene-rendered",{nodeId:params.nodeId});
});SceneJS._eventModule.addListener(SceneJS._eventModule.NODE_CREATED,function(params){runBindings("node-created",{nodeId:params.nodeId});});SceneJS._eventModule.addListener(SceneJS._eventModule.NODE_UPDATED,function(params){runBindings("node-updated",{nodeId:params.nodeId});});SceneJS._eventModule.addListener(SceneJS._eventModule.NODE_DESTROYED,function(params){runBindings("node-destroyed",{nodeId:params.nodeId});
});function runIntervalBindings(){}function runBindings(triggerName,params){if(params&&params.nodeId){var nodeBindings=triggers[triggerName].nodeBindings;var binding=nodeBindings[params.nodeId];if(binding){if(!binding.message.trigger){binding.message.trigger={trigger:triggerName,nodeId:params.nodeId};
}commandService.executeCommand(binding.message);return;}}var bindings=triggers[triggerName].bindings;for(var bindId in bindings){if(bindings.hasOwnProperty(bindId)){var binding=bindings[bindId];if(!binding.message.trigger){binding.message.trigger={trigger:triggerName};}commandService.executeCommand(binding.message);
}}}return{bind:function(binding){if(!binding.bindId){throw"binding element missing: bindId";}if(!binding.triggers){throw"binding '"+binding.bindId+"' element missing: triggers";}if(!binding.message){throw"binding '"+binding.bindId+"' element missing: message";}var trigger;for(var triggerName in binding.triggers){if(binding.triggers.hasOwnProperty(triggerName)){if(!triggers[triggerName]){throw"binding '"+binding.bindId+"' trigger not supported: '"+triggerName+"'";
}trigger=binding.triggers[triggerName];switch(triggerName){case"interval":var startAt=0;if(trigger.interval.hours){startAt+=trigger.interval.hours*3600000;}if(trigger.interval.minutes){startAt+=trigger.interval.minutes*60000;}if(trigger.interval.seconds){startAt+=trigger.interval.minutes*1000;}trigger.interval._startAt=startAt;
triggers[triggerName]=binding;break;case"interval":case"init":case"error":case"reset":addBinding(triggerName,binding);break;case"scene-rendering":case"scene-rendered":case"node-created":case"node-destroyed":case"node-updated":case"node-rendering":case"node-rendered":addBindingForTarget(triggerName,binding);
break;}}}},unbind:function(binding){for(var trigger in binding.triggers){if(binding.triggers.hasOwnProperty(trigger)){triggers[triggers][binding.id]=undefined;}}}};function addBinding(triggerName,binding){var trigger=binding.triggers[triggerName];triggers[triggerName].bindings[binding.bindId]=binding;
}function addBindingForTarget(triggerName,binding){var trigger=binding.triggers[triggerName];var nodeId=trigger.nodeId;if(nodeId){triggers[triggerName].nodeBindings[nodeId]=binding;}triggers[triggerName].bindings[binding.bindId]=binding;}})());commandService.addCommand("bind",(function(){return{execute:function(params){bindService.bind(params);
}};})());commandService.addCommand("unbind",(function(){return{execute:function(params){bindService.unbind(params);}};})());})();